/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/register': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Registers a new user */
    post: operations['registerUser'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/report_signal': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Report a signal strength measurement. */
    post: operations['reportSignal'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/report_measurement': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Report a speed test measurement. */
    post: operations['reportMeasurement'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/data': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve network data
     * @description Fetches network data with optional filtering by cell_id or timestamp range, and visual display parameters. When filtering by timestamp, both timestamp_from and timestamp_to must be provided together to define a date range. Results are always sorted by timestamp.
     */
    get: {
      parameters: {
        query?: {
          /** @description Filter results by cell identifier */
          cell_id?: string;
          /** @description Start of timestamp range - must be used together with timestamp_to */
          timestamp_from?: string;
          /** @description End of timestamp range - must be used together with timestamp_from */
          timestamp_to?: string;
          /** @description Width of the display area in pixels */
          width?: number;
          /** @description Height of the display area in pixels */
          height?: number;
          /** @description Top coordinate of the viewport */
          top?: number;
          /** @description Left coordinate of the viewport */
          left?: number;
          /** @description Controls the size of data bins for aggregation */
          binSizeShift?: number;
          /** @description Zoom level for the map view */
          zoom?: number;
          /** @description Comma-separated list of selected site identifiers */
          selectedSites?: string;
          /** @description Type of map visualization to display */
          mapType?: string;
          /** @description Alternative format for timestamp_from */
          timeFrom?: string;
          /** @description Alternative format for timestamp_to */
          timeTo?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A list of network data records, sorted by timestamp */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['QueryData'][];
          };
        };
        /** @description Invalid input */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/sucess': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Success response
     * @description Returns a success message, typically used as a redirect target after successful authentication
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/failure': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Failure response
     * @description Returns an error message, typically used as a redirect target after failed authentication
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Authorization failure */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/sitesSummary': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get summary metrics for all sites
     * @description Returns average ping, download speed, upload speed, and signal strength for each site within the specified time range
     */
    get: {
      parameters: {
        query: {
          /** @description Start of the time range */
          timeFrom: string;
          /** @description End of the time range */
          timeTo: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Summary metrics for all sites */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['SitesSummary'];
          };
        };
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/lineSummary': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get time series data for selected sites
     * @description Returns time series data for the specified metric and sites within the specified time range
     */
    get: {
      parameters: {
        query: {
          /** @description Type of metric to aggregate (ping, download_speed, upload_speed, or dbm) */
          mapType: string;
          /** @description Comma-separated list of site names to include */
          selectedSites: string;
          /** @description Start of the time range */
          timeFrom: string;
          /** @description End of the time range */
          timeTo: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Time series data for selected sites */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['LineSummaryItem'][];
          };
        };
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/markers': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get marker data for map visualization
     * @description Returns geolocation data with network metrics for selected sites and devices within the specified time range
     */
    get: {
      parameters: {
        query: {
          /** @description Comma-separated list of site names to include */
          sites: string;
          /** @description Comma-separated list of device IDs to include */
          devices?: string;
          /** @description Start of the time range */
          timeFrom: string;
          /** @description End of the time range */
          timeTo: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Marker data for map visualization */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['MarkerData'][];
          };
        };
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/dataRange': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get geographic boundaries of available data
     * @description Returns the center coordinates and bounding box (minimum and maximum latitude/longitude) of all available measurement data.
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Geographic boundaries of available data */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['DataRangeResponse'];
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/sites': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all sites
     * @description Returns a list of all available sites with their location and status information
     */
    get: operations['getSites'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/secure/get_groups': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Get distinct group identifiers
     * @description Returns a list of unique group identifiers across signal and measurement data
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successfully retrieved group list */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['GroupList'];
          };
        };
        /** @description Unauthorized - redirects to /api/failure */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/secure/delete_group': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Delete a group of measurements
     * @description Removes all measurements associated with the specified group
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['DeleteGroupRequest'];
        };
      };
      responses: {
        /** @description Successfully deleted group */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
        /** @description Unauthorized - redirects to /api/failure */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/secure/delete_manual': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Delete manual measurements
     * @description Removes all manually entered measurements from the database
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successfully deleted manual measurements */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
        /** @description Unauthorized - redirects to /api/failure */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/secure/upload_data': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Upload and process measurement data
     * @description Parses CSV data and stores it as both signal and measurement records.
     *     If a group is specified, any existing data with that group will be removed first.
     *     The CSV should include columns for date, time, coordinate, cell_id, dbm, ping, download_speed, and upload_speed.
     *
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['UploadDataRequest'];
        };
      };
      responses: {
        /** @description Successfully uploaded and processed data */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
        /** @description Bad request - missing CSV data or incorrect format */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
        /** @description Unauthorized - redirects to /api/failure */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Server error during processing */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
        /** @description Service unavailable - database operation failed */
        503: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/secure/get-users': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Get lists of registered and pending users
     * @description Returns two lists:
     *     1. Registered users sorted by issue date (newest first)
     *     2. Pending users whose issue date is within the expiry display limit, sorted by issue date (newest first)
     *
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successfully retrieved user lists */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['GetUserResponse'];
          };
        };
        /** @description Unauthorized - redirects to /api/failure */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/secure/toggle-users': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Toggle a user's enabled status
     * @description Enables or disables a user account by their identity
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['ToggleUserRequest'];
        };
      };
      responses: {
        /** @description Successfully toggled user status */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
        /** @description Bad request - missing or invalid parameters */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
        /** @description Unauthorized - redirects to /api/failure */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Service unavailable - database operation failed */
        503: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/secure/login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * LDAP authentication
     * @description Authenticates a user against an LDAP directory server.
     *     Uses Passport LDAP strategy which binds to the LDAP server with the provided credentials.
     *     On success, creates a session and redirects to /api/success.
     *     On failure, redirects to /api/failure.
     *
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['LdapCredentials'];
          'application/x-www-form-urlencoded': components['schemas']['LdapCredentials'];
        };
      };
      responses: {
        /** @description Successful authentication */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example success */
              result: string;
            };
          };
        };
        /** @description Authentication failed */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Invalid credentials */
              error: string;
            };
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Failed to establish session */
              error: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/logout': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Log out user
     * @description Ends the user's authenticated session
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successfully logged out */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/secure/edit_sites': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Update site configuration
     * @description Updates the sites configuration file with provided data.
     *     Requires user to be authenticated - will redirect to login page if not authenticated.
     *
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/x-www-form-urlencoded': {
            /**
             * @description JSON string containing site configuration data
             * @example {"site1":{"name":"Site 1","location":"Building A"},"site2":{"name":"Site 2","location":"Building B"}}
             */
            sites: string;
          };
        };
      };
      responses: {
        /** @description Site configuration successfully updated */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
        /** @description Bad request - invalid JSON format or missing required fields */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
        /** @description Unauthorized - User not logged in */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
        /** @description Server error while updating configuration file */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/secure/new-user': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create a new user with cryptographic identity
     * @description Creates a new user with a cryptographically secure identity using EC keys.
     *     Generates keypairs, creates signatures, and stores user information.
     *     Requires authentication - will redirect to login page if not authenticated.
     *
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['NewUserRequest'];
        };
      };
      responses: {
        /** @description User successfully created with cryptographic identity */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['NewUserRequest'];
          };
        };
        /** @description Unauthorized - User not logged in */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
        /** @description Cryptographic operation error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
        /** @description Database operation error */
        503: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/secure-site': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * Update an existing site
     * @description Updates an existing site with the provided information
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['Site'];
        };
      };
      responses: {
        /** @description Site successfully updated */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
        /** @description Bad request - invalid site data */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
        /** @description Unauthorized - User not logged in */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
        /** @description Server error while updating site */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
      };
    };
    /**
     * Add a new site
     * @description Creates a new site with the provided information
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['Site'];
        };
      };
      responses: {
        /** @description Site successfully created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
        /** @description Bad request - invalid site data */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
        /** @description Unauthorized - User not logged in */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
        /** @description Server error while creating site */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
      };
    };
    /**
     * Delete a site
     * @description Removes an existing site from the system
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['Site'];
        };
      };
      responses: {
        /** @description Site successfully deleted */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
        /** @description Bad request - invalid site data */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
        /** @description Unauthorized - User not logged in */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
        /** @description Server error while deleting site */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    NewUserRequest: {
      /**
       * Format: email
       * @description User's email address
       * @example user@example.com
       */
      email?: string;
      /**
       * @description User's first name
       * @example John
       */
      firstName?: string;
      /**
       * @description User's last name
       * @example Doe
       */
      lastName?: string;
    };
    LdapCredentials: {
      /**
       * @description LDAP username (could be DN, uid, or email depending on LDAP configuration)
       * @example uid=jsmith,ou=users,dc=example,dc=com
       */
      username: string;
      /**
       * Format: password
       * @description LDAP password
       * @example password123
       */
      password: string;
    };
    CryptoIdentityResponse: {
      /**
       * @description Cryptographic signature in hexadecimal format
       * @example 30450221009d41a9afd...
       */
      sigma_t?: string;
      /**
       * @description Private key in DER format converted to hexadecimal
       * @example 308184020100301006...
       */
      sk_t?: string;
      /**
       * @description Public key in DER format converted to hexadecimal
       * @example 3056301006072a8648...
       */
      pk_a?: string;
    };
    UploadDataRequest: {
      /**
       * @description CSV data to be parsed and stored
       * @example date,time,coordinate,cell_id,dbm,ping,download_speed,upload_speed
       *     2021-01-25,18:43:54,47.681932,-122.318292,cell-1,-85.3,-87.1,137.4,5.2,7.3
       */
      csv: string;
      /**
       * @description Optional group identifier to associate with uploaded data
       * @example fieldtrip-2021
       */
      group?: string;
    };
    DeleteGroupRequest: {
      /**
       * @description Group identifier to delete
       * @example fieldtrip-2021
       */
      group: string;
    };
    /** @description List of unique group identifiers across signal and measurement data */
    GroupList: string[];
    User: {
      /**
       * @description Unique identifier for the user
       * @example 9a8b7c6d5e4f3g2h1i
       */
      identity: string;
      /**
       * Format: email
       * @description User's email address
       * @example user@example.com
       */
      email: string;
      /**
       * @description User's first name
       * @example John
       */
      firstName: string;
      /**
       * @description User's last name
       * @example Doe
       */
      lastName: string;
      /**
       * @description Whether the user has completed registration
       * @example true
       */
      registered: boolean;
      /**
       * Format: date-time
       * @description Date when the user was issued or account was created
       * @example 2023-03-15T14:30:45.123Z
       */
      issueDate: string;
      /**
       * @description Whether the user account is currently enabled
       * @example true
       */
      isEnabled: boolean;
      /**
       * @description User's public key
       * @example 308201a2300d06092a864886f70d01010105000382018f003082018a02820181...
       */
      publicKey: string;
      /**
       * @description QR code data for user registration
       * @example {"sigma_t":"...","sk_t":"...","pk_a":"..."}
       */
      qrCode: string;
      /**
       * Format: date-time
       * @description Last time the user was online in ISO 8601 date-time (YYYY-MM-DDTHH:mm:ss.sssZ)
       * @example 2023-03-15T14:30:45.123Z
       */
      lastOnline: string;
    };
    GetUserResponse: {
      /** @description List of pending users (not yet registered) whose issue date is within the expiry limit */
      pending: components['schemas']['User'][];
      /** @description List of registered users */
      registered: components['schemas']['User'][];
    };
    ToggleUserRequest: {
      /**
       * @description Unique identifier of the user to update
       * @example 9a8b7c6d5e4f3g2h1i
       */
      identity: string;
      /**
       * @description New enabled status for the user
       * @example true
       */
      enabled: boolean;
    };
    BaseMeasureDataModel: {
      /**
       * Format: double
       * @description Geographic latitude coordinate
       */
      latitude: number;
      /**
       * Format: double
       * @description Geographic longitude coordinate
       */
      longitude: number;
      /** @description When the measurement was taken */
      timestamp: string;
      /** @description Identifier for the cell tower or access point */
      cell_id: string;
      /** @description Unique identifier for the reporting device */
      device_id: string;
      /** @description Flag indicating if the measurement has been reported and will be shown on the map. */
      show_data: boolean;
    };
    SignalStrengthReportModel: components['schemas']['BaseMeasureDataModel'] & {
      /** @description Signal strength in decibel-milliwatts */
      dbm: number;
      /** @description Code representing the signal strength level */
      level_code: number;
    };
    ConnectivityReportModel: components['schemas']['BaseMeasureDataModel'] & {
      /**
       * Format: double
       * @description Upload speed measurement
       */
      upload_speed: number;
      /**
       * Format: double
       * @description Download speed measurement
       */
      download_speed: number;
      /**
       * Format: double
       * @description Network latency in milliseconds
       */
      ping: number;
      /**
       * Format: double
       * @description Packet loss percentage
       */
      package_loss: number;
    };
    Site: {
      /**
       * @description Name of the site
       * @example Filipino Community Center
       */
      name: string;
      /**
       * Format: double
       * @description Geographic latitude coordinate
       * @example 47.681932654395915
       */
      latitude: number;
      /**
       * Format: double
       * @description Geographic longitude coordinate
       * @example -122.31829217664796
       */
      longitude: number;
      /**
       * @description Current status of the site
       * @example active
       * @enum {string}
       */
      status: SiteStatus;
      /**
       * @description Physical address of the site
       * @example 5740 Martin Luther King Jr Way S, Seattle, WA 98118
       */
      address: string;
      /** @description Array of cell identifiers associated with the site */
      cell_id: string[];
      /**
       * @description Optional color identifier for the site in hex code
       * @example #FF5733
       */
      color?: string;
      /** @description Optional geographical boundary coordinates defining the site perimeter as [latitude, longitude] pairs */
      boundary?: [number, number][];
    };
    /** @example {
     *       "Filipino Community Center": {
     *         "ping": 115.28,
     *         "download_speed": 7.16,
     *         "upload_speed": 8.63,
     *         "dbm": -78.4
     *       }
     *     } */
    SitesSummary: {
      [key: string]: {
        /**
         * Format: double
         * @description Average ping in milliseconds
         * @example 137.41
         */
        ping: number;
        /**
         * Format: double
         * @description Average download speed
         * @example 5.23
         */
        download_speed: number;
        /**
         * Format: double
         * @description Average upload speed
         * @example 7.28
         */
        upload_speed: number;
        /**
         * Format: double
         * @description Average signal strength in dBm
         * @example -85.3
         */
        dbm: number;
      };
    };
    MarkerData: {
      /**
       * Format: double
       * @description Geographic latitude coordinate
       * @example 47.681932654395915
       */
      latitude: number;
      /**
       * Format: double
       * @description Geographic longitude coordinate
       * @example -122.31829217664796
       */
      longitude: number;
      /**
       * @description Identifier for the device that collected the data
       * @example 1e683a49d71ffd0
       */
      device_id: string;
      /**
       * @description Name of the site
       * @example Filipino Community Center
       */
      site: string;
      /**
       * Format: double
       * @description Signal strength in dBm (optional)
       * @example -78.4
       */
      dbm?: number;
      /**
       * Format: double
       * @description Upload speed measurement
       * @example 7.28
       */
      upload_speed: number;
      /**
       * Format: double
       * @description Download speed measurement
       * @example 5.23
       */
      download_speed: number;
      /**
       * Format: double
       * @description Network latency measurement
       * @example 137.41
       */
      ping: number;
      /**
       * @description Measurement identifier
       * @example 614157263c28e1a473ede843
       */
      mid: string;
    };
    LineSummaryItem: {
      /**
       * @description Name of the site
       * @example Filipino Community Center
       */
      site: string;
      /** @description Time series data points for the site */
      values: {
        /**
         * Format: date-time
         * @description Timestamp for the data point
         * @example 2021-01-25T18:00:00.000Z
         */
        date: string;
        /**
         * Format: double
         * @description Average value for the metric at this timestamp
         * @example 7.28
         */
        value: number;
      }[];
    };
    UserRegistration: {
      /**
       * @description Public key in hexadecimal format, ed25519, pem, pkcs8.
       * @example aabbccddeeff00112233445566778899
       */
      publicKey: string;
      /**
       * Format: byte
       * @description Message to be registered in binary format.
       * @example SGVsbG8gd29ybGQ=
       */
      message: string;
      /**
       * @description Signature of message in hex.
       * @example c3lzdGVtZXN0cmluZw==
       */
      sigMessage: string;
    };
    DataReport: {
      /** @description The parameter `h_pkr` */
      h_pkr: string;
      /** @description The parameter `sigma_m` */
      sigma_m: string;
      /** @description The parameter `M` */
      M: string;
    };
    SiteMeasurementData: {
      /**
       * @description Unique identifier for the record
       * @example 614157263c28e1a473ede843
       */
      _id: string;
      /**
       * Format: double
       * @description Geographic latitude coordinate
       * @example 47.681932654395915
       */
      latitude: number;
      /**
       * Format: double
       * @description Geographic longitude coordinate
       * @example -122.31829217664796
       */
      longitude: number;
      /**
       * Format: date-time
       * @description Time when the measurement was recorded
       * @example 2021-01-25T18:43:54.370Z
       */
      timestamp: string;
      /**
       * Format: double
       * @description Upload speed measurement
       * @example 7.289173724717997
       */
      upload_speed: number;
      /**
       * Format: double
       * @description Download speed measurement
       * @example 5.234371563131994
       */
      download_speed: number;
      /**
       * Format: double
       * @description Amount of data transferred since the previous report
       * @example 735.2343217314725
       */
      data_since_last_report: number;
      /**
       * Format: double
       * @description Network latency measurement
       * @example 137.41470114174285
       */
      ping: number;
      /**
       * @description Identifier for the cell/location where data was collected
       * @example Filipino Community Center
       */
      cell_id: string;
      /**
       * @description Identifier for the device that collected the data
       * @example 1e683a49d71ffd0
       */
      device_id: string;
    };
    DataRangeResponse: {
      /**
       * @description Center coordinates [latitude, longitude] of the data range
       * @example [
       *       47.6062,
       *       -122.3321
       *     ]
       */
      center: number[];
      /**
       * Format: double
       * @description Minimum latitude value in the data range
       * @example 47.5001
       */
      minLat: number;
      /**
       * Format: double
       * @description Minimum longitude value in the data range
       * @example -122.4382
       */
      minLon: number;
      /**
       * Format: double
       * @description Maximum latitude value in the data range
       * @example 47.734
       */
      maxLat: number;
      /**
       * Format: double
       * @description Maximum longitude value in the data range
       * @example -122.2364
       */
      maxLon: number;
    };
    /** @description Represents a single data point in a query result */
    QueryData: {
      /**
       * @description The bin/bucket identifier for data categorization
       * @example 3
       */
      bin: number;
      /**
       * @description The string representation of calculated average value for data in this bin with 2 decimal places.
       * @example 45.70
       */
      average: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  registerUser: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UserRegistration'];
      };
    };
    responses: {
      /** @description User already registered */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User registered successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid input */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized registration */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Registration keys are invalid */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Registration period expired */
      408: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  reportSignal: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['DataReport'];
      };
    };
    responses: {
      /** @description Signal reported successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User not found */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid signature */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  reportMeasurement: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['DataReport'];
      };
    };
    responses: {
      /** @description Signal reported successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User not found */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid signature */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getSitesOld: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List of sites */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Site'][];
        };
      };
    };
  };
  getSites: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List of sites */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Site'][];
        };
      };
    };
  };
}
export enum SiteStatus {
  active = 'active',
  confirmed = 'confirmed',
  in_conversation = 'in-conversation',
}
