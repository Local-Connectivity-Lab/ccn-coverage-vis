{"version":3,"sources":["MapSelectionRadio.tsx","Navbar.tsx","Sidebar.tsx","SiteMarker.tsx","MeasurementPoint.tsx","Map.tsx","App.tsx","index.tsx"],"names":["MAP_TYPE_INDEX","ping","upload_speed","download_speed","MapSelectionRadio","props","className","Container","FormControl","component","Typography","variant","RadioGroup","row","aria-label","name","value","mapType","onChange","event","_mapType","target","Error","setMapType","FormControlLabel","control","Radio","label","useStyles","makeStyles","theme","createStyles","root","flexGrow","marginBottom","menuButton","marginRight","spacing","title","Navbar","classes","AppBar","position","Toolbar","IconButton","edge","color","Button","options","sites","map","Sidebar","selectedSites","setSelectedSites","labelledBy","colorDomain","statusColor","d3","domain","range","isSiteMarkerProps","prop","latitude","longitude","address","includes","status","SiteMarker","Marker","Popup","style","backgroundColor","MeasurementPoint","Circle","center","pathOptions","fillColor","Map","useState","data","d","colorScale","setColorScale","every","useEffect","ss","MapContainer","height","width","zoom","TileLayer","attribution","url","filter","site","datum","device_id","timestamp","App","document","Grid","container","item","xs","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f2a50be2.chunk.js","sourcesContent":["import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport Radio from '@material-ui/core/Radio';\nimport Typography from '@material-ui/core/Typography';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport 'fontsource-roboto';\n\nconst MAP_TYPE_INDEX = {\n  ping: 1,\n  upload_speed: 1,\n  download_speed: 1,\n} as const;\nexport type MapType = keyof typeof MAP_TYPE_INDEX;\n\nfunction isMapType(m: any): m is MapType {\n  return m in MAP_TYPE_INDEX;\n}\n\ninterface MapSelectionRadioProps {\n  mapType: MapType;\n  setMapType: React.Dispatch<React.SetStateAction<MapType>>;\n}\n\nexport default function MapSelectionRadio(props: MapSelectionRadioProps) {\n  type InputEvent = React.ChangeEvent<HTMLInputElement>;\n  const handleChange = (event: InputEvent) => {\n    const _mapType = event.target.value;\n    if (!isMapType(_mapType)) {\n      throw new Error('Invalid map type selection: ' + _mapType);\n    }\n    props.setMapType(_mapType);\n  };\n\n  return (\n    <div className='App'>\n      <Container>\n        <FormControl component='fieldset'>\n          <Typography variant='overline'>Map Type</Typography>\n          <RadioGroup\n            row\n            aria-label='gender'\n            name='gender1'\n            value={props.mapType}\n            onChange={handleChange}\n          >\n            {/* remove signal for now because we don't have \"signal\" in our mock data */}\n            {/* <FormControlLabel value=\"signal\" control={<Radio />} label=\"Signal\" /> */}\n            <FormControlLabel\n              value='upload_speed'\n              control={<Radio />}\n              label='Upload Speed'\n            />\n            <FormControlLabel\n              value='download_speed'\n              control={<Radio />}\n              label='Download Speed'\n            />\n            <FormControlLabel value='ping' control={<Radio />} label='Ping' />\n          </RadioGroup>\n        </FormControl>\n      </Container>\n    </div>\n  );\n}\n","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      marginBottom: '20px',\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  }),\n);\n\nexport default function Navbar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position='static'>\n        <Toolbar>\n          <IconButton\n            edge='start'\n            className={classes.menuButton}\n            color='inherit'\n            aria-label='menu'\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant='h6' className={classes.title}>\n            CCN - Performance Evaluation\n          </Typography>\n          <Button color='inherit'>About</Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport MultiSelect from 'react-multi-select-component';\nimport 'fontsource-roboto';\nimport sites from './sites.json';\n\nconst options = sites.map(({ name }) => ({ label: name, value: name }));\n\ninterface SidebarProps {\n  selectedSites: SidebarOption[];\n  setSelectedSites: React.Dispatch<React.SetStateAction<SidebarOption[]>>;\n}\n\nconst Sidebar = (props: SidebarProps) => {\n  return (\n    <div>\n      <Typography variant='overline'>Select Sites</Typography>\n      <MultiSelect\n        options={options}\n        value={props.selectedSites}\n        onChange={props.setSelectedSites}\n        labelledBy='Select'\n      />\n    </div>\n  );\n};\n\nexport default Sidebar;\n","import React from 'react';\nimport { Marker, Popup } from 'react-leaflet';\nimport * as d3 from 'd3';\n\ntype SiteStatus = 'active' | 'confirmed' | 'in-conversation';\nconst colorDomain: SiteStatus[] = ['active', 'confirmed', 'in-conversation'];\nconst colorRange = ['green', 'yellow', 'red'] as const;\nconst statusColor = d3\n  .scaleOrdinal<string>()\n  .domain(colorDomain)\n  .range(colorRange);\n\nexport interface SiteMarkerProps {\n  name: string;\n  latitude: number;\n  longitude: number;\n  status: SiteStatus;\n  address: string;\n}\n\nexport function isSiteMarkerProps(prop: any): prop is SiteMarkerProps {\n  return (\n    typeof prop?.name === 'string' ||\n    typeof prop?.latitude === 'number' ||\n    typeof prop?.longitude === 'number' ||\n    typeof prop?.address === 'string' ||\n    colorDomain.includes(prop?.status)\n  );\n}\n\nconst SiteMarker = (props: SiteMarkerProps) => {\n  return (\n    <Marker key={props.name} position={[props.latitude, props.longitude]}>\n      <Popup>\n        {props.name}\n        <span style={{ backgroundColor: statusColor(props.status) }}>\n          [{props.status}]\n        </span>\n        <br />\n        {props.address}\n      </Popup>\n    </Marker>\n  );\n};\n\nexport default SiteMarker;\n","import React from 'react';\nimport { Circle } from 'react-leaflet';\n\nexport interface MeasurementDatum {\n  latitude: number;\n  longitude: number;\n  timestamp: string;\n  upload_speed: number;\n  download_speed: number;\n  data_since_last_report: number;\n  ping: number;\n  site: string;\n  device_id: number;\n}\n\ninterface MeasurementPointProps extends MeasurementDatum {\n  color: string;\n}\n\nconst MeasurementPoint = (props: MeasurementPointProps) => {\n  return (\n    <Circle\n      center={[props.latitude, props.longitude]}\n      pathOptions={{ color: props.color, fillColor: props.color }}\n    ></Circle>\n  );\n};\n\nexport default MeasurementPoint;\n","import React, { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer } from 'react-leaflet';\nimport * as d3 from 'd3';\nimport sites from './sites.json';\nimport data from './data-small.json';\nimport SiteMarker, { isSiteMarkerProps, SiteMarkerProps } from './SiteMarker';\nimport MeasurementPoint from './MeasurementPoint';\nimport { ScaleSequential } from 'd3';\nimport { MapType } from './MapSelectionRadio';\n\nconst position: [number, number] = [47.44846, -122.29217];\n\nfunction isSiteMarkerPropsArray(sites: any[]): sites is SiteMarkerProps[] {\n  return sites.every(isSiteMarkerProps);\n}\n\ninterface MapProps {\n  mapType: MapType;\n  selectedSites: SidebarOption[];\n}\n\nconst Map = (props: MapProps) => {\n  const [colorScale, setColorScale] = useState<ScaleSequential<string, never>>(\n    () =>\n      d3\n        .scaleSequentialLog(d3.interpolateInferno)\n        .domain([\n          d3.max(data, d => d.ping) ?? 1,\n          d3.min(data, d => d.ping) ?? 0,\n        ]),\n  );\n\n  if (!isSiteMarkerPropsArray(sites)) {\n    throw new Error('data has incorrect type');\n  }\n\n  useEffect(() => {\n    setColorScale(() =>\n      d3\n        .scaleSequentialLog(d3.interpolateInferno)\n        .domain([\n          d3.max(data, d => d[props.mapType]) ?? 1,\n          d3.min(data, d => d[props.mapType]) ?? 0,\n        ]),\n    );\n  }, [props.mapType]);\n\n  const selectedSites = props.selectedSites.map(ss => ss.label);\n\n  return (\n    <MapContainer\n      style={{ height: 600, width: 1000 }}\n      center={position}\n      zoom={10}\n    >\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n      />\n      {sites\n        .filter(site => selectedSites.includes(site.name))\n        .map(site => (\n          <SiteMarker key={site.name} {...site} />\n        ))}\n      {data\n        .filter(datum => selectedSites.includes(datum.site))\n        .map(datum => (\n          <MeasurementPoint\n            key={`${datum.device_id}-${datum.timestamp}`}\n            {...datum}\n            color={colorScale(datum[props.mapType])}\n          />\n        ))}\n    </MapContainer>\n  );\n};\n\nexport default Map;\n","import React, { useState } from 'react';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport MapSelectionRadio, { MapType } from './MapSelectionRadio';\nimport Navbar from './Navbar';\nimport Sidebar from './Sidebar';\nimport Map from './Map';\nimport 'fontsource-roboto';\nimport './index.css';\n\nfunction App() {\n  const [mapType, setMapType] = useState<MapType>('ping');\n  const [selectedSites, setSelectedSites] = useState<SidebarOption[]>([]);\n\n  document.title = 'Performance Evaluation';\n  return (\n    <div className='App'>\n      <Navbar />\n      <Container>\n        <Grid container spacing={3}>\n          <Grid item xs={3}>\n            <Sidebar\n              selectedSites={selectedSites}\n              setSelectedSites={setSelectedSites}\n            />\n          </Grid>\n          <Grid item xs={9}>\n            <MapSelectionRadio mapType={mapType} setMapType={setMapType} />\n            <Map mapType={mapType} selectedSites={selectedSites} />\n          </Grid>\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}