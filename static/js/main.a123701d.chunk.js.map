{"version":3,"sources":["MapSelectionRadio.tsx","Navbar.tsx","Sidebar.tsx","leaflet-component/site-marker.ts","MapLegend.tsx","MeasurementMap.tsx","utils/get-data-range.ts","utils/set-bounds.ts","App.tsx","index.tsx"],"names":["MAP_TYPE_INDEX","ping","upload_speed","download_speed","MapSelectionRadio","props","className","Container","FormControl","component","disabled","loading","Typography","variant","RadioGroup","row","aria-label","name","value","mapType","onChange","event","_mapType","target","Error","setMapType","FormControlLabel","control","Radio","label","useStyles","makeStyles","theme","createStyles","root","flexGrow","marginBottom","menuButton","marginRight","spacing","title","Navbar","classes","AppBar","position","Toolbar","IconButton","edge","color","Button","options","sites","map","Sidebar","selectedSites","setSelectedSites","labelledBy","statusColor","Map","isSite","prop","latitude","longitude","address","status","height","marginTop","ticks","MapLegend","colorDomain","width","_svg","useRef","current","d3","tickFormat","svg","attr","join","style","selectAll","remove","x","Object","assign","copy","interpolator","range","append","n","canvas","createCanvas","context","getContext","i","fillStyle","fillRect","ramp","toDataURL","Math","round","tickValues","domain","NaN","call","undefined","tickSize","g","select","text","id","ref","URL","devicePixelRatio","MeasurementMap","setLoading","useState","cDomain","setCDomain","bins","binW","binH","top","left","useEffect","dataRange","data","d","minLat","maxLat","minLon","maxLon","center","getDataRange","_map","L","setView","bounds","project","y","_bottomleft","bottomleft","floor","min","ceil","max","_topright","topright","sw","unproject","ne","setMaxBounds","on","panInsideBounds","animate","setBounds","_bin","Array","forEach","index","push","attribution","maxZoom","minZoom","opacity","addTo","markers","every","isSiteArray","size","site","set","bindPopup","get","siteMarker","marker","some","s","removeFrom","layer","_binH","_top","_left","_bins","b","filter","clearLayers","colorScale","bin","idx","fillColor","fillOpacity","stroke","App","document","Grid","container","item","xs","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a123701d.chunk.js","sourcesContent":["import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport Radio from '@material-ui/core/Radio';\nimport Typography from '@material-ui/core/Typography';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport 'fontsource-roboto';\n\nconst MAP_TYPE_INDEX = {\n  ping: 1,\n  upload_speed: 1,\n  download_speed: 1,\n} as const;\nexport type MapType = keyof typeof MAP_TYPE_INDEX;\n\nfunction isMapType(m: any): m is MapType {\n  return m in MAP_TYPE_INDEX;\n}\n\ninterface MapSelectionRadioProps {\n  mapType: MapType;\n  setMapType: React.Dispatch<React.SetStateAction<MapType>>;\n  loading: boolean;\n}\n\nexport default function MapSelectionRadio(props: MapSelectionRadioProps) {\n  type InputEvent = React.ChangeEvent<HTMLInputElement>;\n  const handleChange = (event: InputEvent) => {\n    const _mapType = event.target.value;\n    if (!isMapType(_mapType)) {\n      throw new Error('Invalid map type selection: ' + _mapType);\n    }\n    props.setMapType(_mapType);\n  };\n\n  return (\n    <div className='App'>\n      <Container>\n        <FormControl component='fieldset' disabled={props.loading}>\n          <Typography variant='overline'>Map Type</Typography>\n          <RadioGroup\n            row\n            aria-label='gender'\n            name='gender1'\n            value={props.mapType}\n            onChange={handleChange}\n          >\n            {/* remove signal for now because we don't have \"signal\" in our mock data */}\n            {/* <FormControlLabel value=\"signal\" control={<Radio />} label=\"Signal\" /> */}\n            <FormControlLabel\n              value='upload_speed'\n              control={<Radio />}\n              label='Upload Speed'\n            />\n            <FormControlLabel\n              value='download_speed'\n              control={<Radio />}\n              label='Download Speed'\n            />\n            <FormControlLabel value='ping' control={<Radio />} label='Ping' />\n          </RadioGroup>\n        </FormControl>\n      </Container>\n    </div>\n  );\n}\n","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      marginBottom: '20px',\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  }),\n);\n\nexport default function Navbar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position='static'>\n        <Toolbar>\n          <IconButton\n            edge='start'\n            className={classes.menuButton}\n            color='inherit'\n            aria-label='menu'\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant='h6' className={classes.title}>\n            CCN - Performance Evaluation\n          </Typography>\n          <Button color='inherit'>About</Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport MultiSelect from 'react-multi-select-component';\nimport 'fontsource-roboto';\nimport sites from './sites.json';\n\nconst options = sites.map(({ name }) => ({ label: name, value: name }));\n\ninterface SidebarProps {\n  selectedSites: SidebarOption[];\n  setSelectedSites: React.Dispatch<React.SetStateAction<SidebarOption[]>>;\n  loading: boolean;\n}\n\nconst Sidebar = (props: SidebarProps) => {\n  return (\n    <div>\n      <Typography variant='overline'>Select Sites</Typography>\n      <MultiSelect\n        options={options}\n        value={props.selectedSites}\n        onChange={props.setSelectedSites}\n        labelledBy='Select'\n        disabled={props.loading}\n      />\n    </div>\n  );\n};\n\nexport default Sidebar;\n","import * as L from 'leaflet';\n\nconst statusColor: Map<SiteStatus, string> = new Map([\n  ['active', 'green'],\n  ['confirmed', 'yellow'],\n  ['in-conversation', 'red'],\n]);\n\nexport function isSiteArray(sites: any[]): sites is Site[] {\n  return sites.every(isSite);\n}\n\nexport function isSite(prop: any): prop is Site {\n  return (\n    typeof prop?.name === 'string' ||\n    typeof prop?.latitude === 'number' ||\n    typeof prop?.longitude === 'number' ||\n    typeof prop?.address === 'string' ||\n    prop?.status in statusColor\n  );\n}\n\nexport default function siteMarker(site: Site) {\n  return L.marker([site.latitude, site.longitude]).bindPopup(\n    `${site.name} <span style=\"background-color: ${statusColor.get(\n      site.status,\n    )}\">[${site.status}]</span><br />${site.address}`,\n  );\n}\n","import React, { useRef } from 'react';\nimport * as d3 from 'd3';\nimport { createCanvas } from 'node-canvas';\n\nconst tickSize = 6;\nconst height = 150;\nconst marginTop = 40;\nconst marginRight = 15;\nconst marginBottom = 0;\nconst marginLeft = 0;\nconst ticks = height / 64;\n\nfunction ramp(color: (t: number) => string, n = 256) {\n  const canvas = createCanvas(1, n);\n  const context = canvas.getContext('2d');\n\n  for (let i = 0; i < n; ++i) {\n    context.fillStyle = color(i / (n - 1));\n    context.fillRect(0, i, 1, 1);\n  }\n\n  return canvas;\n}\n\ninterface MapProps {\n  colorDomain: number[] | undefined;\n  title: string;\n  width: number;\n}\n\nconst MapLegend = ({ colorDomain, title, width }: MapProps) => {\n  const _svg = useRef<SVGSVGElement>(null);\n\n  if (colorDomain && _svg.current) {\n    const color = d3.scaleSequential(colorDomain, d3.interpolateViridis);\n    const tickFormat = d3.format('.2f');\n\n    const svg = d3\n      .select<SVGElement, unknown>(_svg.current)\n      .attr('width', width)\n      .attr('height', height)\n      .attr('viewBox', [0, 0, width, height].join(' '))\n      .style('overflow', 'visible')\n      .style('display', 'block');\n\n    svg.selectAll('*').remove();\n\n    let tickAdjust = (g: d3.Selection<SVGGElement, unknown, null, unknown>) =>\n      g.selectAll('.tick line').attr('x1', width - marginRight - marginLeft);\n    let x = Object.assign(\n      color\n        .copy()\n        .interpolator(d3.interpolateRound(marginTop, height - marginBottom)),\n      {\n        range() {\n          return [height - marginBottom, marginTop];\n        },\n      },\n    );\n\n    svg\n      .append('image')\n      .attr('x', marginLeft)\n      .attr('y', marginTop)\n      .attr('width', width - marginLeft - marginRight)\n      .attr('height', height - marginTop - marginBottom)\n      .attr('preserveAspectRatio', 'none')\n      .attr(\n        'xlink:href',\n        ramp(\n          color.interpolator(),\n          height - marginTop - marginBottom,\n        ).toDataURL(),\n      );\n\n    const n = Math.round(ticks + 1);\n    const tickValues = d3\n      .range(n)\n      .map(i => d3.quantile(color.domain(), i / (n - 1)) ?? NaN);\n\n    svg\n      .append('g')\n      .attr('transform', `translate(${marginLeft},${0})`)\n      .call(\n        d3\n          .axisLeft(x)\n          .ticks(ticks, typeof tickFormat === 'string' ? tickFormat : undefined)\n          // .tickFormat(typeof tickFormat === 'function' ? tickFormat : undefined)\n          .tickSize(tickSize)\n          .tickValues(tickValues),\n      )\n      .call(tickAdjust)\n      .call(g => g.select('.domain').remove())\n      .call(g =>\n        g\n          .append('text')\n          .attr('y', marginTop - 12)\n          .attr('x', width - marginRight - marginLeft - 2)\n          .attr('fill', 'currentColor')\n          .attr('text-anchor', 'begin')\n          .attr('font-weight', 'bold')\n          .attr('class', 'title')\n          .text(title),\n      );\n  }\n\n  return <svg id='map-legend' ref={_svg} className={'leaflet-control'}></svg>;\n};\n\nexport default MapLegend;\n","import React, { useEffect, useRef, useState } from 'react';\nimport sites from './sites.json';\nimport data from './data-small.json';\nimport { MapType } from './MapSelectionRadio';\nimport * as L from 'leaflet';\nimport * as d3 from 'd3';\nimport siteMarker, { isSiteArray } from './leaflet-component/site-marker';\nimport getDataRange from './utils/get-data-range';\nimport setBounds from './utils/set-bounds';\nimport MapLegend from './MapLegend';\n\nconst ATTRIBUTION =\n  'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, ' +\n  'under <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a>. ' +\n  'Data by <a href=\"http://openstreetmap.org\">OpenStreetMap</a>, ' +\n  'under <a href=\"http://www.openstreetmap.org/copyright\">ODbL</a>.';\n\nconst URL = `https://stamen-tiles-{s}.a.ssl.fastly.net/toner-lite/{z}/{x}/{y}${\n  devicePixelRatio > 1 ? '@2x' : ''\n}.png`;\n\nconst BIN_SIZE_SHIFT = 1;\nconst DEFAULT_ZOOM = 10;\nconst LEGEND_WIDTH = 25;\n\ninterface MapProps {\n  mapType: MapType;\n  selectedSites: SidebarOption[];\n  setLoading: React.Dispatch<React.SetStateAction<boolean>>;\n  width: number;\n  height: number;\n}\n\nconst MeasurementMap = ({\n  mapType,\n  selectedSites,\n  setLoading,\n  width,\n  height,\n}: MapProps) => {\n  const [cDomain, setCDomain] = useState<number[]>();\n  const map = useRef<L.Map>();\n  const bins = useRef<(Measurement[] | null)[]>();\n  const binW = useRef<number>();\n  const binH = useRef<number>();\n  const top = useRef<number>();\n  const left = useRef<number>();\n\n  useEffect(() => {\n    const dataRange = getDataRange([...data, ...sites]);\n\n    const _map = L.map('map-id').setView(dataRange.center, DEFAULT_ZOOM);\n\n    const bounds = setBounds({ ...dataRange, map: _map, width, height });\n\n    const _bin = new Array<Measurement[] | null>(\n      (bounds.width * bounds.height) >> BIN_SIZE_SHIFT,\n    );\n    data.forEach(d => {\n      const { x, y } = _map.project([d.latitude, d.longitude], DEFAULT_ZOOM);\n      const index =\n        ((x - bounds.left) >> BIN_SIZE_SHIFT) * bounds.height +\n        ((y - bounds.top) >> BIN_SIZE_SHIFT);\n      (_bin[index] = _bin[index] ?? []).push(d);\n    });\n\n    L.tileLayer(URL, {\n      attribution: ATTRIBUTION,\n      maxZoom: 15,\n      minZoom: 10,\n      opacity: 0.5,\n    }).addTo(_map);\n\n    map.current = _map;\n    bins.current = _bin;\n    binW.current = bounds.width;\n    binH.current = bounds.height;\n    top.current = bounds.top;\n    left.current = bounds.left;\n\n    setLoading(false);\n  }, [setLoading, width, height]);\n\n  const markers = useRef(new Map<string, L.Marker>());\n  useEffect(() => {\n    if (!isSiteArray(sites)) {\n      throw new Error('data has incorrect type');\n    }\n\n    const _map = map.current;\n    if (!_map) return;\n\n    if (markers.current.size === 0) {\n      sites.forEach(site => markers.current.set(site.name, siteMarker(site)));\n    }\n\n    markers.current.forEach((marker, site) => {\n      if (selectedSites.some(s => s.label === site)) {\n        marker.addTo(_map);\n      } else {\n        marker.removeFrom(_map);\n      }\n    });\n  }, [selectedSites]);\n\n  const layer = useRef<L.LayerGroup>();\n  useEffect(() => {\n    const _map = map.current;\n    const _binH = binH.current;\n    const _top = top.current;\n    const _left = left.current;\n    if (!_map || !_binH || !_top || !_left) return;\n\n    const _bins = (bins.current ?? []).map(b =>\n      d3.mean(\n        (b ?? []).filter(d => selectedSites.some(s => s.label === d.site)),\n        d => d[mapType],\n      ),\n    );\n\n    if (!layer.current) {\n      layer.current = L.layerGroup().addTo(_map);\n    } else {\n      layer.current.clearLayers();\n    }\n\n    const colorDomain = [\n      d3.max(_bins, d => d) ?? 1,\n      d3.min(_bins, d => d) ?? 0,\n    ];\n\n    const colorScale = d3.scaleSequential(colorDomain, d3.interpolateViridis);\n    setCDomain(colorDomain);\n\n    _bins.forEach((bin, idx) => {\n      if (bin && layer.current) {\n        const x = ((idx / _binH) << BIN_SIZE_SHIFT) + _left;\n        const y = (idx % _binH << BIN_SIZE_SHIFT) + _top;\n\n        const sw = _map.unproject([x, y], DEFAULT_ZOOM);\n        const ne = _map.unproject(\n          [x + (1 << BIN_SIZE_SHIFT), y + (1 << BIN_SIZE_SHIFT)],\n          DEFAULT_ZOOM,\n        );\n\n        L.rectangle(L.latLngBounds(sw, ne), {\n          fillColor: colorScale(bin),\n          fillOpacity: 0.75,\n          stroke: false,\n        }).addTo(layer.current);\n      }\n    });\n  }, [selectedSites, mapType]);\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <div id='map-id' style={{ height, width, position: 'absolute' }}></div>\n      <div style={{ position: 'absolute', left: width - LEGEND_WIDTH }}>\n        <MapLegend\n          colorDomain={cDomain}\n          title={mapType}\n          width={LEGEND_WIDTH}\n        ></MapLegend>\n      </div>\n    </div>\n  );\n};\n\nexport default MeasurementMap;\n","import * as d3 from 'd3';\n\ntype Datum = {\n  latitude: number;\n  longitude: number;\n};\n\nexport default function dataRange(data: Datum[]) {\n  const [minLat, maxLat] = d3\n    .extent(data, d => d.latitude)\n    .map((d: number | undefined) => d ?? NaN);\n  const [minLon, maxLon] = d3\n    .extent(data, d => d.longitude)\n    .map((d: number | undefined) => d ?? NaN);\n\n  const center: [number, number] = [\n    (minLat + maxLat) / 2,\n    (minLon + maxLon) / 2,\n  ];\n\n  return { center, minLat, minLon, maxLat, maxLon };\n}\n","import * as L from 'leaflet';\n\ntype SetBoundsParams = {\n  map: L.Map;\n  center: [number, number];\n  minLat: number;\n  minLon: number;\n  maxLat: number;\n  maxLon: number;\n  width: number;\n  height: number;\n};\n\nexport default function setBounds({\n  map,\n  center,\n  minLat,\n  minLon,\n  maxLat,\n  maxLon,\n  width,\n  height,\n}: SetBoundsParams) {\n  const { x, y } = map.project(center);\n\n  const _bottomleft = map.project([minLat, minLon]);\n  const bottomleft: [number, number] = [\n    Math.floor(Math.min(x - width / 2, _bottomleft.x - width / 10)),\n    Math.ceil(Math.max(y + height / 2, _bottomleft.y + height / 10)),\n  ];\n\n  const _topright = map.project([maxLat, maxLon]);\n  const topright: [number, number] = [\n    Math.ceil(Math.max(x + width / 2, _topright.x + width / 10)),\n    Math.floor(Math.min(y - height / 2, _topright.y - height / 10)),\n  ];\n\n  const sw = map.unproject(bottomleft);\n  const ne = map.unproject(topright);\n\n  const bounds = L.latLngBounds(sw, ne);\n  map\n    .setMaxBounds(bounds)\n    .on('drag', () => map.panInsideBounds(bounds, { animate: false }));\n\n  return {\n    width: topright[0] - bottomleft[0],\n    height: bottomleft[1] - topright[1],\n    left: bottomleft[0],\n    top: topright[1],\n  };\n}\n","import React, { useState } from 'react';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport MapSelectionRadio, { MapType } from './MapSelectionRadio';\nimport Navbar from './Navbar';\nimport Sidebar from './Sidebar';\nimport MeasurementMap from './MeasurementMap';\nimport 'fontsource-roboto';\nimport './index.css';\n\nfunction App() {\n  const [mapType, setMapType] = useState<MapType>('ping');\n  const [selectedSites, setSelectedSites] = useState<SidebarOption[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  document.title = 'Performance Evaluation';\n  return (\n    <div className='App'>\n      <Navbar />\n      <Container>\n        <Grid container spacing={3}>\n          <Grid item xs={3}>\n            <Sidebar\n              selectedSites={selectedSites}\n              setSelectedSites={setSelectedSites}\n              loading={loading}\n            />\n          </Grid>\n          <Grid item xs={9}>\n            <MapSelectionRadio\n              mapType={mapType}\n              setMapType={setMapType}\n              loading={loading}\n            />\n            <MeasurementMap\n              mapType={mapType}\n              selectedSites={selectedSites}\n              setLoading={setLoading}\n              width={910}\n              height={600}\n            />\n          </Grid>\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}