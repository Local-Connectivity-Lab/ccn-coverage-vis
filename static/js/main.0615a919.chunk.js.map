{"version":3,"sources":["MapSelectionRadio.tsx","Navbar.tsx","Sidebar.tsx","leaflet-component/site-marker.ts","Map.tsx","App.tsx","index.tsx"],"names":["MAP_TYPE_INDEX","ping","upload_speed","download_speed","MapSelectionRadio","props","className","Container","FormControl","component","Typography","variant","RadioGroup","row","aria-label","name","value","mapType","onChange","event","_mapType","target","Error","setMapType","FormControlLabel","control","Radio","label","useStyles","makeStyles","theme","createStyles","root","flexGrow","marginBottom","menuButton","marginRight","spacing","title","Navbar","classes","AppBar","position","Toolbar","IconButton","edge","color","Button","options","sites","map","Sidebar","selectedSites","setSelectedSites","labelledBy","statusColor","Map","isSite","prop","latitude","longitude","address","status","DEFAULT_POSITION","URL","devicePixelRatio","MeasurementMap","useRef","useEffect","current","L","setView","attribution","maxZoom","minZoom","opacity","addTo","markers","every","isSiteArray","_map","size","forEach","site","set","bindPopup","get","siteMarker","marker","some","s","removeFrom","heatLayer","_data","data","filter","d","setLatLngs","radius","id","style","height","width","App","useState","document","Grid","container","item","xs","ReactDOM","render","StrictMode","getElementById"],"mappings":"m6ouFASMA,EAAiB,CACrBC,KAAM,EACNC,aAAc,EACdC,eAAgB,GAaH,SAASC,EAAkBC,GAUxC,OACE,qBAAKC,UAAU,MAAf,SACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAaC,UAAU,WAAvB,UACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,WAApB,sBACA,eAACC,EAAA,EAAD,CACEC,KAAG,EACHC,aAAW,SACXC,KAAK,UACLC,MAAOX,EAAMY,QACbC,SAlBW,SAACC,GACpB,IAAMC,EAAWD,EAAME,OAAOL,MAC9B,KAAeI,KAZLpB,GAaR,MAAM,IAAIsB,MAAM,+BAAiCF,GAEnDf,EAAMkB,WAAWH,IAQX,UASE,cAACI,EAAA,EAAD,CACER,MAAM,eACNS,QAAS,cAACC,EAAA,EAAD,IACTC,MAAM,iBAER,cAACH,EAAA,EAAD,CACER,MAAM,iBACNS,QAAS,cAACC,EAAA,EAAD,IACTC,MAAM,mBAER,cAACH,EAAA,EAAD,CAAkBR,MAAM,OAAOS,QAAS,cAACC,EAAA,EAAD,IAAWC,MAAM,mB,0EClD/DC,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJC,SAAU,EACVC,aAAc,QAEhBC,WAAY,CACVC,YAAaN,EAAMO,QAAQ,IAE7BC,MAAO,CACLL,SAAU,QAKD,SAASM,IACtB,IAAMC,EAAUZ,IAEhB,OACE,qBAAKtB,UAAWkC,EAAQR,KAAxB,SACE,cAACS,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLvC,UAAWkC,EAAQL,WACnBW,MAAM,UACNhC,aAAW,OAJb,SAME,cAAC,IAAD,MAEF,cAACJ,EAAA,EAAD,CAAYC,QAAQ,KAAKL,UAAWkC,EAAQF,MAA5C,0CAGA,cAACS,EAAA,EAAD,CAAQD,MAAM,UAAd,0B,oBCpCJE,EAAUC,EAAMC,KAAI,gBAAGnC,EAAH,EAAGA,KAAH,MAAe,CAAEY,MAAOZ,EAAMC,MAAOD,MAqBhDoC,EAdC,SAAC9C,GACf,OACE,gCACE,cAACK,EAAA,EAAD,CAAYC,QAAQ,WAApB,0BACA,cAAC,IAAD,CACEqC,QAASA,EACThC,MAAOX,EAAM+C,cACblC,SAAUb,EAAMgD,iBAChBC,WAAW,e,gBCnBbC,G,MAAuC,IAAIC,IAAI,CACnD,CAAC,SAAU,SACX,CAAC,YAAa,UACd,CAAC,kBAAmB,UAOf,SAASC,EAAOC,GACrB,MACwB,kBAAtB,OAAOA,QAAP,IAAOA,OAAP,EAAOA,EAAM3C,OACa,kBAA1B,OAAO2C,QAAP,IAAOA,OAAP,EAAOA,EAAMC,WACc,kBAA3B,OAAOD,QAAP,IAAOA,OAAP,EAAOA,EAAME,YACY,kBAAzB,OAAOF,QAAP,IAAOA,OAAP,EAAOA,EAAMG,WACT,OAAJH,QAAI,IAAJA,OAAA,EAAAA,EAAMI,UAAUP,ECVpB,IAAMQ,EAAqC,CAAC,UAAW,WAQjDC,EAAG,0EACPC,iBAAmB,EAAI,MAAQ,GADxB,QA8DMC,EArDQ,SAAC,GAA0C,IAAxCjD,EAAuC,EAAvCA,QAASmC,EAA8B,EAA9BA,cAC3BF,EAAMiB,mBAEZC,qBAAU,WACRlB,EAAImB,QAAUC,MAAM,UAAUC,QAAQR,EAAkB,IAExDO,YAAYN,EAAK,CACfQ,YArBJ,uQAsBIC,QAAS,GACTC,QAAS,GACTC,QAAS,KACRC,MAAM1B,EAAImB,WACZ,IAEH,IAAMQ,EAAUV,iBAAO,IAAIX,KAC3BY,qBAAU,WACR,IDjCG,SAAqBnB,GAC1B,OAAOA,EAAM6B,MAAMrB,GCgCZsB,CAAY9B,GACf,MAAM,IAAI3B,MAAM,2BAGlB,IAAM0D,EAAO9B,EAAImB,QACZW,IAEwB,IAAzBH,EAAQR,QAAQY,MAClBhC,EAAMiC,SAAQ,SAAAC,GAAI,OAAIN,EAAQR,QAAQe,IAAID,EAAKpE,KD3BtC,SAAoBoE,GACjC,OAAOb,SAAS,CAACa,EAAKxB,SAAUwB,EAAKvB,YAAYyB,UAA1C,UACFF,EAAKpE,KADH,2CAC0CwC,EAAY+B,IACzDH,EAAKrB,QAFF,cAGEqB,EAAKrB,OAHP,yBAG8BqB,EAAKtB,UCuBe0B,CAAWJ,OAGlEN,EAAQR,QAAQa,SAAQ,SAACM,EAAQL,GAC3B/B,EAAcqC,MAAK,SAAAC,GAAC,OAAIA,EAAE/D,QAAUwD,KACtCK,EAAOZ,MAAMI,GAEbQ,EAAOG,WAAWX,SAGrB,CAAC5B,IAEJ,IAAMwC,EAAYzB,mBAclB,OAbAC,qBAAU,WACR,GAAKlB,EAAImB,QAAT,CAEA,IAAMwB,EAAoCC,EACvCC,QAAO,SAAAC,GAAC,OAAI5C,EAAcqC,MAAK,SAAAC,GAAC,OAAIA,EAAE/D,QAAUqE,EAAEb,WAClDjC,KAAI,SAAA8C,GAAC,MAAI,CAACA,EAAErC,SAAUqC,EAAEpC,UAAWoC,EAAE/E,OACnC2E,EAAUvB,QAGbuB,EAAUvB,QAAQ4B,WAAWJ,GAF7BD,EAAUvB,QAAUC,YAAYuB,EAAO,CAAEK,OAAQ,KAAMtB,MAAM1B,EAAImB,YAIlE,CAACjB,EAAenC,IAEZ,qBAAKkF,GAAG,SAASC,MAAO,CAAEC,OAAQ,IAAKC,MAAO,QCvCxCC,MA1Bf,WACE,MAA8BC,mBAAkB,QAAhD,mBAAOvF,EAAP,KAAgBM,EAAhB,KACA,EAA0CiF,mBAA0B,IAApE,mBAAOpD,EAAP,KAAsBC,EAAtB,KAGA,OADAoD,SAASnE,MAAQ,yBAEf,sBAAKhC,UAAU,MAAf,UACE,cAACiC,EAAD,IACA,cAAChC,EAAA,EAAD,UACE,eAACmG,EAAA,EAAD,CAAMC,WAAS,EAACtE,QAAS,EAAzB,UACE,cAACqE,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SACE,cAAC,EAAD,CACEzD,cAAeA,EACfC,iBAAkBA,MAGtB,eAACqD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,UACE,cAACzG,EAAD,CAAmBa,QAASA,EAASM,WAAYA,IACjD,cAAC,EAAD,CAAgBN,QAASA,EAASmC,cAAeA,gBCvB7D0D,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFP,SAASQ,eAAe,W","file":"static/js/main.0615a919.chunk.js","sourcesContent":["import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport Radio from '@material-ui/core/Radio';\nimport Typography from '@material-ui/core/Typography';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport 'fontsource-roboto';\n\nconst MAP_TYPE_INDEX = {\n  ping: 1,\n  upload_speed: 1,\n  download_speed: 1,\n} as const;\nexport type MapType = keyof typeof MAP_TYPE_INDEX;\n\nfunction isMapType(m: any): m is MapType {\n  return m in MAP_TYPE_INDEX;\n}\n\ninterface MapSelectionRadioProps {\n  mapType: MapType;\n  setMapType: React.Dispatch<React.SetStateAction<MapType>>;\n}\n\nexport default function MapSelectionRadio(props: MapSelectionRadioProps) {\n  type InputEvent = React.ChangeEvent<HTMLInputElement>;\n  const handleChange = (event: InputEvent) => {\n    const _mapType = event.target.value;\n    if (!isMapType(_mapType)) {\n      throw new Error('Invalid map type selection: ' + _mapType);\n    }\n    props.setMapType(_mapType);\n  };\n\n  return (\n    <div className='App'>\n      <Container>\n        <FormControl component='fieldset'>\n          <Typography variant='overline'>Map Type</Typography>\n          <RadioGroup\n            row\n            aria-label='gender'\n            name='gender1'\n            value={props.mapType}\n            onChange={handleChange}\n          >\n            {/* remove signal for now because we don't have \"signal\" in our mock data */}\n            {/* <FormControlLabel value=\"signal\" control={<Radio />} label=\"Signal\" /> */}\n            <FormControlLabel\n              value='upload_speed'\n              control={<Radio />}\n              label='Upload Speed'\n            />\n            <FormControlLabel\n              value='download_speed'\n              control={<Radio />}\n              label='Download Speed'\n            />\n            <FormControlLabel value='ping' control={<Radio />} label='Ping' />\n          </RadioGroup>\n        </FormControl>\n      </Container>\n    </div>\n  );\n}\n","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      marginBottom: '20px',\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  }),\n);\n\nexport default function Navbar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position='static'>\n        <Toolbar>\n          <IconButton\n            edge='start'\n            className={classes.menuButton}\n            color='inherit'\n            aria-label='menu'\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant='h6' className={classes.title}>\n            CCN - Performance Evaluation\n          </Typography>\n          <Button color='inherit'>About</Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport MultiSelect from 'react-multi-select-component';\nimport 'fontsource-roboto';\nimport sites from './sites.json';\n\nconst options = sites.map(({ name }) => ({ label: name, value: name }));\n\ninterface SidebarProps {\n  selectedSites: SidebarOption[];\n  setSelectedSites: React.Dispatch<React.SetStateAction<SidebarOption[]>>;\n}\n\nconst Sidebar = (props: SidebarProps) => {\n  return (\n    <div>\n      <Typography variant='overline'>Select Sites</Typography>\n      <MultiSelect\n        options={options}\n        value={props.selectedSites}\n        onChange={props.setSelectedSites}\n        labelledBy='Select'\n      />\n    </div>\n  );\n};\n\nexport default Sidebar;\n","import * as L from 'leaflet';\n\nconst statusColor: Map<SiteStatus, string> = new Map([\n  ['active', 'green'],\n  ['confirmed', 'yellow'],\n  ['in-conversation', 'red'],\n]);\n\nexport function isSiteArray(sites: any[]): sites is Site[] {\n  return sites.every(isSite);\n}\n\nexport function isSite(prop: any): prop is Site {\n  return (\n    typeof prop?.name === 'string' ||\n    typeof prop?.latitude === 'number' ||\n    typeof prop?.longitude === 'number' ||\n    typeof prop?.address === 'string' ||\n    prop?.status in statusColor\n  );\n}\n\nexport default function siteMarker(site: Site) {\n  return L.marker([site.latitude, site.longitude]).bindPopup(\n    `${site.name} <span stype=\"background-color: ${statusColor.get(\n      site.status,\n    )}\">[${site.status}]</span><br />${site.address}`,\n  );\n}\n","import React, { useEffect, useRef } from 'react';\nimport sites from './sites.json';\nimport data from './data-small.json';\nimport { MapType } from './MapSelectionRadio';\nimport * as L from 'leaflet';\nimport {} from 'leaflet.heat';\nimport siteMarker, { isSiteArray } from './leaflet-component/site-marker';\n\nconst DEFAULT_POSITION: [number, number] = [47.44846, -122.29217];\n\nconst ATTRIBUTION =\n  'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, ' +\n  'under <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a>. ' +\n  'Data by <a href=\"http://openstreetmap.org\">OpenStreetMap</a>, ' +\n  'under <a href=\"http://www.openstreetmap.org/copyright\">ODbL</a>.';\n\nconst URL = `https://stamen-tiles-{s}.a.ssl.fastly.net/toner-lite/{z}/{x}/{y}${\n  devicePixelRatio > 1 ? '@2x' : ''\n}.png`;\n\ninterface MapProps {\n  mapType: MapType;\n  selectedSites: SidebarOption[];\n}\n\nconst MeasurementMap = ({ mapType, selectedSites }: MapProps) => {\n  const map = useRef<L.Map>();\n\n  useEffect(() => {\n    map.current = L.map('map-id').setView(DEFAULT_POSITION, 10);\n\n    L.tileLayer(URL, {\n      attribution: ATTRIBUTION,\n      maxZoom: 15,\n      minZoom: 10,\n      opacity: 0.5,\n    }).addTo(map.current);\n  }, []);\n\n  const markers = useRef(new Map<string, L.Marker>());\n  useEffect(() => {\n    if (!isSiteArray(sites)) {\n      throw new Error('data has incorrect type');\n    }\n\n    const _map = map.current;\n    if (!_map) return;\n\n    if (markers.current.size === 0) {\n      sites.forEach(site => markers.current.set(site.name, siteMarker(site)));\n    }\n\n    markers.current.forEach((marker, site) => {\n      if (selectedSites.some(s => s.label === site)) {\n        marker.addTo(_map);\n      } else {\n        marker.removeFrom(_map);\n      }\n    });\n  }, [selectedSites]);\n\n  const heatLayer = useRef<L.HeatLayer>();\n  useEffect(() => {\n    if (!map.current) return;\n\n    const _data: [number, number, number][] = data\n      .filter(d => selectedSites.some(s => s.label === d.site))\n      .map(d => [d.latitude, d.longitude, d[mapType]]);\n    if (!heatLayer.current) {\n      heatLayer.current = L.heatLayer(_data, { radius: 10 }).addTo(map.current);\n    } else {\n      heatLayer.current.setLatLngs(_data);\n    }\n  }, [selectedSites, mapType]);\n\n  return <div id='map-id' style={{ height: 600, width: 1000 }}></div>;\n};\n\nexport default MeasurementMap;\n","import React, { useState } from 'react';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport MapSelectionRadio, { MapType } from './MapSelectionRadio';\nimport Navbar from './Navbar';\nimport Sidebar from './Sidebar';\nimport MeasurementMap from './Map';\nimport 'fontsource-roboto';\nimport './index.css';\n\nfunction App() {\n  const [mapType, setMapType] = useState<MapType>('ping');\n  const [selectedSites, setSelectedSites] = useState<SidebarOption[]>([]);\n\n  document.title = 'Performance Evaluation';\n  return (\n    <div className='App'>\n      <Navbar />\n      <Container>\n        <Grid container spacing={3}>\n          <Grid item xs={3}>\n            <Sidebar\n              selectedSites={selectedSites}\n              setSelectedSites={setSelectedSites}\n            />\n          </Grid>\n          <Grid item xs={9}>\n            <MapSelectionRadio mapType={mapType} setMapType={setMapType} />\n            <MeasurementMap mapType={mapType} selectedSites={selectedSites} />\n          </Grid>\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}