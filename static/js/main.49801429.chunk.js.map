{"version":3,"sources":["MapSelectionRadio.tsx","Navbar.tsx","Sidebar.tsx","leaflet-component/site-marker.ts","Map.tsx","leaflet-component/measurement-point.ts","App.tsx","index.tsx"],"names":["MAP_TYPE_INDEX","ping","upload_speed","download_speed","MapSelectionRadio","props","className","Container","FormControl","component","Typography","variant","RadioGroup","row","aria-label","name","value","mapType","onChange","event","_mapType","target","Error","setMapType","FormControlLabel","control","Radio","label","useStyles","makeStyles","theme","createStyles","root","flexGrow","marginBottom","menuButton","marginRight","spacing","title","Navbar","classes","AppBar","position","Toolbar","IconButton","edge","color","Button","options","sites","map","Sidebar","selectedSites","setSelectedSites","labelledBy","statusColor","Map","isSite","prop","latitude","longitude","address","status","DEFAULT_POSITION","URL","devicePixelRatio","useState","setMap","useEffect","L","setView","attribution","maxZoom","minZoom","opacity","addTo","every","isSiteArray","filter","site","includes","forEach","bindPopup","get","siteMarker","scale","data","d3","domain","d","createColorScale","datum","measurement","fillColor","measurementPoint","id","style","height","width","App","document","Grid","container","item","xs","s","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.49801429.chunk.js","sourcesContent":["import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport Radio from '@material-ui/core/Radio';\nimport Typography from '@material-ui/core/Typography';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport 'fontsource-roboto';\n\nconst MAP_TYPE_INDEX = {\n  ping: 1,\n  upload_speed: 1,\n  download_speed: 1,\n} as const;\nexport type MapType = keyof typeof MAP_TYPE_INDEX;\n\nfunction isMapType(m: any): m is MapType {\n  return m in MAP_TYPE_INDEX;\n}\n\ninterface MapSelectionRadioProps {\n  mapType: MapType;\n  setMapType: React.Dispatch<React.SetStateAction<MapType>>;\n}\n\nexport default function MapSelectionRadio(props: MapSelectionRadioProps) {\n  type InputEvent = React.ChangeEvent<HTMLInputElement>;\n  const handleChange = (event: InputEvent) => {\n    const _mapType = event.target.value;\n    if (!isMapType(_mapType)) {\n      throw new Error('Invalid map type selection: ' + _mapType);\n    }\n    props.setMapType(_mapType);\n  };\n\n  return (\n    <div className='App'>\n      <Container>\n        <FormControl component='fieldset'>\n          <Typography variant='overline'>Map Type</Typography>\n          <RadioGroup\n            row\n            aria-label='gender'\n            name='gender1'\n            value={props.mapType}\n            onChange={handleChange}\n          >\n            {/* remove signal for now because we don't have \"signal\" in our mock data */}\n            {/* <FormControlLabel value=\"signal\" control={<Radio />} label=\"Signal\" /> */}\n            <FormControlLabel\n              value='upload_speed'\n              control={<Radio />}\n              label='Upload Speed'\n            />\n            <FormControlLabel\n              value='download_speed'\n              control={<Radio />}\n              label='Download Speed'\n            />\n            <FormControlLabel value='ping' control={<Radio />} label='Ping' />\n          </RadioGroup>\n        </FormControl>\n      </Container>\n    </div>\n  );\n}\n","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      marginBottom: '20px',\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  }),\n);\n\nexport default function Navbar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position='static'>\n        <Toolbar>\n          <IconButton\n            edge='start'\n            className={classes.menuButton}\n            color='inherit'\n            aria-label='menu'\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant='h6' className={classes.title}>\n            CCN - Performance Evaluation\n          </Typography>\n          <Button color='inherit'>About</Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport MultiSelect from 'react-multi-select-component';\nimport 'fontsource-roboto';\nimport sites from './sites.json';\n\nconst options = sites.map(({ name }) => ({ label: name, value: name }));\n\ninterface SidebarProps {\n  selectedSites: SidebarOption[];\n  setSelectedSites: React.Dispatch<React.SetStateAction<SidebarOption[]>>;\n}\n\nconst Sidebar = (props: SidebarProps) => {\n  return (\n    <div>\n      <Typography variant='overline'>Select Sites</Typography>\n      <MultiSelect\n        options={options}\n        value={props.selectedSites}\n        onChange={props.setSelectedSites}\n        labelledBy='Select'\n      />\n    </div>\n  );\n};\n\nexport default Sidebar;\n","import * as L from 'leaflet';\n\nconst statusColor: Map<SiteStatus, string> = new Map([\n  ['active', 'green'],\n  ['confirmed', 'yellow'],\n  ['in-conversation', 'red'],\n]);\n\nexport function isSiteArray(sites: any[]): sites is Site[] {\n  return sites.every(isSite);\n}\n\nexport function isSite(prop: any): prop is Site {\n  return (\n    typeof prop?.name === 'string' ||\n    typeof prop?.latitude === 'number' ||\n    typeof prop?.longitude === 'number' ||\n    typeof prop?.address === 'string' ||\n    prop?.status in statusColor\n  );\n}\n\nexport default function siteMarker(map: L.Map, site: Site) {\n  L.marker([site.latitude, site.longitude])\n    .addTo(map)\n    .bindPopup(\n      `${site.name} <span stype=\"background-color: ${statusColor.get(\n        site.status,\n      )}\">[${site.status}]</span><br />${site.address}`,\n    );\n}\n","import React, { useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport sites from './sites.json';\nimport data from './data-small.json';\nimport { MapType } from './MapSelectionRadio';\nimport * as L from 'leaflet';\nimport siteMarker, { isSiteArray } from './leaflet-component/site-marker';\nimport measurementPoint from './leaflet-component/measurement-point';\n\nconst DEFAULT_POSITION: [number, number] = [47.44846, -122.29217];\n\nconst ATTRIBUTION =\n  'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, ' +\n  'under <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a>. ' +\n  'Data by <a href=\"http://openstreetmap.org\">OpenStreetMap</a>, ' +\n  'under <a href=\"http://www.openstreetmap.org/copyright\">ODbL</a>.';\n\nconst URL = `https://stamen-tiles-{s}.a.ssl.fastly.net/toner-lite/{z}/{x}/{y}${\n  devicePixelRatio > 1 ? '@2x' : ''\n}.png`;\n\nfunction createColorScale(data: Measurement[], mapType: MapType) {\n  return d3\n    .scaleSequentialLog(d3.interpolateInferno)\n    .domain([\n      d3.max(data, d => d[mapType]) ?? 1,\n      d3.min(data, d => d[mapType]) ?? 0,\n    ]);\n}\n\ninterface MapProps {\n  mapType: MapType;\n  selectedSites: string[];\n}\n\nconst Map = (props: MapProps) => {\n  const [map, setMap] = useState<L.Map>();\n\n  useEffect(() => {\n    const map = L.map('map-id').setView(DEFAULT_POSITION, 10);\n    setMap(map);\n\n    L.tileLayer(URL, {\n      attribution: ATTRIBUTION,\n      maxZoom: 15,\n      minZoom: 10,\n      opacity: 0.5,\n    }).addTo(map);\n  }, []);\n\n  useEffect(() => {\n    if (!isSiteArray(sites)) {\n      throw new Error('data has incorrect type');\n    }\n\n    if (!map) return;\n\n    sites\n      .filter(site => props.selectedSites.includes(site.name))\n      .forEach(site => siteMarker(map, site));\n  }, [map, props.selectedSites]);\n\n  useEffect(() => {\n    if (!map) return;\n\n    const scale = createColorScale(data, props.mapType);\n    data\n      .filter(data => props.selectedSites.includes(data.site))\n      .forEach(datum =>\n        measurementPoint(map, datum, scale(datum[props.mapType])),\n      );\n  }, [map, props.selectedSites, props.mapType]);\n\n  return <div id='map-id' style={{ height: 600, width: 1000 }}></div>;\n};\n\nexport default Map;\n","import * as L from 'leaflet';\n\nexport default function measurementPoint(\n  map: L.Map,\n  measurement: Measurement,\n  color: string,\n) {\n  L.circle([measurement.latitude, measurement.longitude], {\n    color,\n    fillColor: color,\n  }).addTo(map);\n}\n","import React, { useState } from 'react';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport MapSelectionRadio, { MapType } from './MapSelectionRadio';\nimport Navbar from './Navbar';\nimport Sidebar from './Sidebar';\nimport Map from './Map';\nimport 'fontsource-roboto';\nimport './index.css';\n\nfunction App() {\n  const [mapType, setMapType] = useState<MapType>('ping');\n  const [selectedSites, setSelectedSites] = useState<SidebarOption[]>([]);\n\n  document.title = 'Performance Evaluation';\n  return (\n    <div className='App'>\n      <Navbar />\n      <Container>\n        <Grid container spacing={3}>\n          <Grid item xs={3}>\n            <Sidebar\n              selectedSites={selectedSites}\n              setSelectedSites={setSelectedSites}\n            />\n          </Grid>\n          <Grid item xs={9}>\n            <MapSelectionRadio mapType={mapType} setMapType={setMapType} />\n            <Map\n              mapType={mapType}\n              selectedSites={selectedSites.map(s => s.label)}\n            />\n          </Grid>\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}