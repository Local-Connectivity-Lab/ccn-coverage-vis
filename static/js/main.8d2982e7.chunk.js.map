{"version":3,"sources":["MapSelectionRadio.tsx","Navbar.tsx","Sidebar.tsx","utils/round-2.ts","leaflet-component/site-marker.ts","utils/get-bounds.ts","MapLegend.tsx","utils/fetch-to-json.ts","Loading.tsx","MeasurementMap.tsx","LineChart.tsx","App.tsx","index.tsx"],"names":["MAP_TYPE_INDEX","ping","upload_speed","download_speed","MapSelectionRadio","props","className","Container","FormControl","component","disabled","loading","Typography","variant","RadioGroup","row","name","value","mapType","onChange","event","_mapType","target","Error","setMapType","FormControlLabel","control","Radio","label","useStyles","makeStyles","theme","createStyles","root","flexGrow","marginBottom","menuButton","marginRight","spacing","title","Navbar","classes","AppBar","position","Toolbar","IconButton","edge","color","Button","options","sites","map","Sidebar","selectedSites","setSelectedSites","labelledBy","round2","num","Math","round","statusColor","Map","isSiteArray","every","isSite","prop","latitude","longitude","address","status","siteMarker","site","summary","L","bindTooltip","get","MULTIPLIERS","UNITS","getBounds","center","minLat","minLon","maxLat","maxLon","width","height","project","x","y","_bottomleft","bottomleft","floor","min","ceil","max","_topright","topright","sw","unproject","ne","bounds","setMaxBounds","on","panInsideBounds","animate","left","top","marginTop","ticks","MapLegend","colorDomain","_svg","useRef","current","d3","tickFormat","svg","attr","join","style","selectAll","remove","Object","assign","copy","interpolator","range","append","n","canvas","createCanvas","context","getContext","i","fillStyle","fillRect","ramp","toDataURL","tickValues","domain","NaN","call","undefined","tickSize","g","select","text","id","ref","fetchToJson","url","a","fetch","json","Loading","src","size","opacity","display","alt","URL","devicePixelRatio","API","MAP_TYPE_CONVERT","MeasurementMap","setLoading","useState","cDomain","setCDomain","setMap","setBounds","markers","setMarkers","layer","setLayer","useEffect","dataRange","_sites","_siteSummary","_map","setView","_bounds","_markers","forEach","set","addTo","attribution","maxZoom","minZoom","marker","some","s","setOpacity","URLSearchParams","BIN_SIZE_SHIFT","DEFAULT_ZOOM","ss","bins","d","colorScale","clearLayers","bin","idx","fillColor","fillOpacity","stroke","colors","margin","mapTypeConvert","LineChart","offset","xAxis","setXAxis","yAxis","setYAxis","lines","setLines","yTitle","setYTitle","_selectedSites","data","values","v","date","Date","chartWidth","chartHeight","flat","xScale","yScale","xAxisGenerator","yAxisGenerator","lineGenerator","tooltip","transition","duration","enter","_","html","pageX","pageY","update","exit","App","loadingMap","setLoadingMap","loadingLine","setLoadingLine","document","Grid","container","item","xs","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8d2982e7.chunk.js","sourcesContent":["import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport Radio from '@material-ui/core/Radio';\nimport Typography from '@material-ui/core/Typography';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport 'fontsource-roboto';\n\nconst MAP_TYPE_INDEX = {\n  ping: 1,\n  upload_speed: 1,\n  download_speed: 1,\n} as const;\nexport type MapType = keyof typeof MAP_TYPE_INDEX;\n\nfunction isMapType(m: any): m is MapType {\n  return m in MAP_TYPE_INDEX;\n}\n\ninterface MapSelectionRadioProps {\n  mapType: MapType;\n  setMapType: React.Dispatch<React.SetStateAction<MapType>>;\n  loading: boolean;\n}\n\nexport default function MapSelectionRadio(props: MapSelectionRadioProps) {\n  type InputEvent = React.ChangeEvent<HTMLInputElement>;\n  const handleChange = (event: InputEvent) => {\n    const _mapType = event.target.value;\n    if (!isMapType(_mapType)) {\n      throw new Error('Invalid map type selection: ' + _mapType);\n    }\n    props.setMapType(_mapType);\n  };\n\n  return (\n    <div className='App'>\n      <Container>\n        <FormControl component='fieldset' disabled={props.loading}>\n          <Typography variant='overline'>Map Type</Typography>\n          <RadioGroup\n            row\n            aria-label='gender'\n            name='gender1'\n            value={props.mapType}\n            onChange={handleChange}\n          >\n            {/* remove signal for now because we don't have \"signal\" in our mock data */}\n            {/* <FormControlLabel value=\"signal\" control={<Radio />} label=\"Signal\" /> */}\n            <FormControlLabel\n              value='upload_speed'\n              control={<Radio />}\n              label='Upload Speed'\n            />\n            <FormControlLabel\n              value='download_speed'\n              control={<Radio />}\n              label='Download Speed'\n            />\n            <FormControlLabel value='ping' control={<Radio />} label='Ping' />\n          </RadioGroup>\n        </FormControl>\n      </Container>\n    </div>\n  );\n}\n","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      marginBottom: '20px',\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  }),\n);\n\nexport default function Navbar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position='static'>\n        <Toolbar>\n          <IconButton\n            edge='start'\n            className={classes.menuButton}\n            color='inherit'\n            aria-label='menu'\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant='h6' className={classes.title}>\n            CCN - Performance Evaluation\n          </Typography>\n          <Button color='inherit'>About</Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport {MultiSelect} from 'react-multi-select-component';\nimport 'fontsource-roboto';\nimport sites from './sites.json';\n\nconst options = sites.map(({ name }) => ({ label: name, value: name }));\n\ninterface SidebarProps {\n  selectedSites: SidebarOption[];\n  setSelectedSites: React.Dispatch<React.SetStateAction<SidebarOption[]>>;\n  loading: boolean;\n}\n\nconst Sidebar = (props: SidebarProps) => {\n  return (\n    <div>\n      <Typography variant='overline'>Select Sites</Typography>\n      <MultiSelect\n        options={options}\n        value={props.selectedSites}\n        onChange={props.setSelectedSites}\n        labelledBy='Select'\n        disabled={props.loading}\n      />\n    </div>\n  );\n};\n\nexport default Sidebar;\n","export default function round2(num: number) {\n  return Math.round(num * 100) / 100;\n}\n","import * as L from 'leaflet';\nimport { UNITS, MULTIPLIERS } from '../MeasurementMap';\nimport round2 from '../utils/round-2';\n\nconst statusColor: Map<SiteStatus, string> = new Map([\n  ['active', 'green'],\n  ['confirmed', 'yellow'],\n  ['in-conversation', 'red'],\n]);\n\nexport function isSiteArray(sites: any[]): sites is Site[] {\n  return sites.every(isSite);\n}\n\nexport function isSite(prop: any): prop is Site {\n  return (\n    typeof prop?.name === 'string' ||\n    typeof prop?.latitude === 'number' ||\n    typeof prop?.longitude === 'number' ||\n    typeof prop?.address === 'string' ||\n    prop?.status in statusColor\n  );\n}\n\nexport default function siteMarker(\n  site: Site,\n  summary: { ping: number; upload_speed: number; download_speed: number },\n) {\n  return L.marker([site.latitude, site.longitude]).bindTooltip(\n    `${site.name} <span style=\"background-color: ${statusColor.get(\n      site.status,\n    )}\">[${site.status}]</span><br />${site.address}<br/>ping: ${round2(\n      summary?.ping * MULTIPLIERS.ping,\n    )} ${UNITS.ping}<br/>upload speed: ${round2(\n      summary?.upload_speed * MULTIPLIERS.upload_speed,\n    )} ${UNITS.upload_speed}<br/>download speed: ${round2(\n      summary?.download_speed * MULTIPLIERS.download_speed,\n    )} ${UNITS.download_speed}`,\n  );\n}\n","import * as L from 'leaflet';\n\ntype GetBoundsParams = {\n  map: L.Map;\n  center: [number, number];\n  minLat: number;\n  minLon: number;\n  maxLat: number;\n  maxLon: number;\n  width: number;\n  height: number;\n};\n\nexport default function getBounds({\n  map,\n  center,\n  minLat,\n  minLon,\n  maxLat,\n  maxLon,\n  width,\n  height,\n}: GetBoundsParams) {\n  const { x, y } = map.project(center);\n\n  const _bottomleft = map.project([minLat, minLon]);\n  const bottomleft: [number, number] = [\n    Math.floor(Math.min(x - width / 2, _bottomleft.x - width / 10)),\n    Math.ceil(Math.max(y + height / 2, _bottomleft.y + height / 10)),\n  ];\n\n  const _topright = map.project([maxLat, maxLon]);\n  const topright: [number, number] = [\n    Math.ceil(Math.max(x + width / 2, _topright.x + width / 10)),\n    Math.floor(Math.min(y - height / 2, _topright.y - height / 10)),\n  ];\n\n  const sw = map.unproject(bottomleft);\n  const ne = map.unproject(topright);\n\n  const bounds = L.latLngBounds(sw, ne);\n  map\n    .setMaxBounds(bounds)\n    .on('drag', () => map.panInsideBounds(bounds, { animate: false }));\n\n  return {\n    width: topright[0] - bottomleft[0],\n    height: bottomleft[1] - topright[1],\n    left: bottomleft[0],\n    top: topright[1],\n  };\n}\n","import React, { useRef } from 'react';\nimport * as d3 from 'd3';\nimport { createCanvas } from 'node-canvas';\n\nconst tickSize = 6;\nconst height = 150;\nconst marginTop = 40;\nconst marginRight = 15;\nconst marginBottom = 0;\nconst marginLeft = 0;\nconst ticks = height / 64;\n\nfunction ramp(color: (t: number) => string, n = 256) {\n  const canvas = createCanvas(1, n);\n  const context = canvas.getContext('2d');\n\n  for (let i = 0; i < n; ++i) {\n    context.fillStyle = color(i / (n - 1));\n    context.fillRect(0, i, 1, 1);\n  }\n\n  return canvas;\n}\n\ninterface MapProps {\n  colorDomain: number[] | undefined;\n  title: string;\n  width: number;\n}\n\nconst MapLegend = ({ colorDomain, title, width }: MapProps) => {\n  const _svg = useRef<SVGSVGElement>(null);\n\n  if (colorDomain && _svg.current) {\n    const color = d3.scaleSequential(colorDomain, d3.interpolateViridis);\n    const tickFormat = d3.format('.2f');\n\n    const svg = d3\n      .select<SVGElement, unknown>(_svg.current)\n      .attr('width', width)\n      .attr('height', height)\n      .attr('viewBox', [0, 0, width, height].join(' '))\n      .style('overflow', 'visible')\n      .style('display', 'block');\n\n    svg.selectAll('*').remove();\n\n    let tickAdjust = (g: d3.Selection<SVGGElement, unknown, null, unknown>) =>\n      g.selectAll('.tick line').attr('x1', width - marginRight - marginLeft);\n    let x = Object.assign(\n      color\n        .copy()\n        .interpolator(d3.interpolateRound(marginTop, height - marginBottom)),\n      {\n        range() {\n          return [height - marginBottom, marginTop];\n        },\n      },\n    );\n\n    svg\n      .append('image')\n      .attr('x', marginLeft)\n      .attr('y', marginTop)\n      .attr('width', width - marginLeft - marginRight)\n      .attr('height', height - marginTop - marginBottom)\n      .attr('preserveAspectRatio', 'none')\n      .attr(\n        'xlink:href',\n        ramp(\n          color.interpolator(),\n          height - marginTop - marginBottom,\n        ).toDataURL(),\n      );\n\n    const n = Math.round(ticks + 1);\n    const tickValues = d3\n      .range(n)\n      .map(i => d3.quantile(color.domain(), i / (n - 1)) ?? NaN);\n\n    svg\n      .append('g')\n      .attr('transform', `translate(${marginLeft},${0})`)\n      .call(\n        d3\n          .axisLeft(x)\n          .ticks(ticks, typeof tickFormat === 'string' ? tickFormat : undefined)\n          // .tickFormat(typeof tickFormat === 'function' ? tickFormat : undefined)\n          .tickSize(tickSize)\n          .tickValues(tickValues),\n      )\n      .call(tickAdjust)\n      .call(g => g.select('.domain').remove())\n      .call(g =>\n        g\n          .append('text')\n          .attr('y', marginTop - 12)\n          .attr('x', width - marginRight - marginLeft - 2)\n          .attr('fill', 'currentColor')\n          .attr('text-anchor', 'begin')\n          .attr('font-weight', 'bold')\n          .attr('class', 'title')\n          .text(title),\n      );\n  }\n\n  return <svg id='map-legend' ref={_svg} className={'leaflet-control'}></svg>;\n};\n\nexport default MapLegend;\n","export default async function fetchToJson(url: string) {\n  return await (await fetch(url)).json();\n}\n","import React from 'react';\n\ninterface LoadingProps {\n  loading: boolean;\n  left: number;\n  top: number;\n  size: number;\n}\n\nconst Loading = (props: LoadingProps) => {\n  return (\n    <img\n      src='./loading.gif'\n      style={{\n        position: 'absolute',\n        left: props.left - props.size / 2,\n        top: props.top - props.size / 2,\n        height: props.size,\n        opacity: 0.5,\n        display: props.loading ? 'inline' : 'none',\n      }}\n      alt='source: https://tenor.com/view/loading-buffering-spinning-waiting-gif-17313179'\n    />\n  );\n};\n\nexport default Loading;\n","import React, { useEffect, useState } from 'react';\nimport { MapType } from './MapSelectionRadio';\nimport * as L from 'leaflet';\nimport * as d3 from 'd3';\nimport siteMarker, { isSiteArray } from './leaflet-component/site-marker';\nimport getBounds from './utils/get-bounds';\nimport MapLegend from './MapLegend';\nimport fetchToJson from './utils/fetch-to-json';\nimport Loading from './Loading';\n\nconst ATTRIBUTION =\n  'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, ' +\n  'under <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a>. ' +\n  'Data by <a href=\"http://openstreetmap.org\">OpenStreetMap</a>, ' +\n  'under <a href=\"http://www.openstreetmap.org/copyright\">ODbL</a>.';\n\nconst URL = `https://stamen-tiles-{s}.a.ssl.fastly.net/toner-lite/{z}/{x}/{y}${\n  devicePixelRatio > 1 ? '@2x' : ''\n}.png`;\n\nexport const API = 'https://support.seattlecommunitynetwork.org/ccn-server/';\n\nconst BIN_SIZE_SHIFT = 1;\nconst DEFAULT_ZOOM = 10;\nconst LEGEND_WIDTH = 25;\n\nexport const UNITS = {\n  ping: 'ms',\n  download_speed: 'Mbps',\n  upload_speed: 'Mbps',\n} as const;\n\nexport const MULTIPLIERS = {\n  ping: 1,\n  download_speed: 1 / 1000000,\n  upload_speed: 1 / 1000000,\n} as const;\n\nconst MAP_TYPE_CONVERT = {\n  ping: 'Ping',\n  download_speed: 'Download Speed',\n  upload_speed: 'Upload Speed',\n} as const;\n\ninterface MapProps {\n  mapType: MapType;\n  selectedSites: SidebarOption[];\n  setLoading: React.Dispatch<React.SetStateAction<boolean>>;\n  width: number;\n  height: number;\n  loading: boolean;\n}\n\nconst MeasurementMap = ({\n  mapType,\n  selectedSites,\n  setLoading,\n  width,\n  height,\n  loading,\n}: MapProps) => {\n  const [cDomain, setCDomain] = useState<number[]>();\n  const [map, setMap] = useState<L.Map>();\n  const [bounds, setBounds] =\n    useState<{ left: number; top: number; width: number; height: number }>();\n  const [markers, setMarkers] = useState(new Map<string, L.Marker>());\n  const [layer, setLayer] = useState<L.LayerGroup>();\n\n  useEffect(() => {\n    (async () => {\n      const dataRange = await fetchToJson(API + 'dataRange');\n      const _sites = await fetchToJson(API + 'sites');\n      const _siteSummary = await fetchToJson(API + 'sitesSummary');\n      const _map = L.map('map-id').setView(dataRange.center, DEFAULT_ZOOM);\n      const _bounds = getBounds({ ...dataRange, map: _map, width, height });\n      const _markers = new Map<string, L.Marker>();\n\n      if (!isSiteArray(_sites)) {\n        throw new Error('data has incorrect type');\n      }\n      _sites.forEach(site =>\n        _markers.set(\n          site.name,\n          siteMarker(site, _siteSummary[site.name]).addTo(_map),\n        ),\n      );\n\n      L.tileLayer(URL, {\n        attribution: ATTRIBUTION,\n        maxZoom: 15,\n        minZoom: 10,\n        opacity: 0.5,\n      }).addTo(_map);\n\n      setMarkers(_markers);\n      setBounds(_bounds);\n      setMap(_map);\n      setLayer(L.layerGroup().addTo(_map));\n      setLoading(false);\n    })();\n  }, [setLoading, width, height]);\n\n  useEffect(() => {\n    if (!map || !markers) return;\n\n    markers.forEach((marker, site) => {\n      if (selectedSites.some(s => s.label === site)) {\n        marker.setOpacity(1);\n      } else {\n        marker.setOpacity(0.5);\n      }\n    });\n  }, [selectedSites, map, markers]);\n\n  useEffect(() => {\n    if (!map || !bounds || !layer) return;\n\n    setLoading(true);\n    (async () => {\n      const bins: number[] = await fetchToJson(\n        API +\n          'data?' +\n          new URLSearchParams([\n            ['width', bounds.width + ''],\n            ['height', bounds.height + ''],\n            ['left', bounds.left + ''],\n            ['top', bounds.top + ''],\n            ['binSizeShift', BIN_SIZE_SHIFT + ''],\n            ['zoom', DEFAULT_ZOOM + ''],\n            ['selectedSites', selectedSites.map(ss => ss.label).join(',')],\n            ['mapType', mapType],\n          ]),\n      );\n\n      const colorDomain = [\n        d3.max(bins, d => d * MULTIPLIERS[mapType]) ?? 1,\n        d3.min(bins, d => d * MULTIPLIERS[mapType]) ?? 0,\n      ];\n\n      const colorScale = d3.scaleSequential(colorDomain, d3.interpolateViridis);\n      setCDomain(colorDomain);\n\n      layer.clearLayers();\n      bins.forEach((bin, idx) => {\n        if (bin) {\n          const x = ((idx / bounds.height) << BIN_SIZE_SHIFT) + bounds.left;\n          const y = (idx % bounds.height << BIN_SIZE_SHIFT) + bounds.top;\n\n          const sw = map.unproject([x, y], DEFAULT_ZOOM);\n          const ne = map.unproject(\n            [x + (1 << BIN_SIZE_SHIFT), y + (1 << BIN_SIZE_SHIFT)],\n            DEFAULT_ZOOM,\n          );\n\n          L.rectangle(L.latLngBounds(sw, ne), {\n            fillColor: colorScale(bin * MULTIPLIERS[mapType]),\n            fillOpacity: 0.75,\n            stroke: false,\n          }).addTo(layer);\n        }\n      });\n      setLoading(false);\n    })();\n  }, [selectedSites, mapType, setLoading, map, layer, bounds]);\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <div id='map-id' style={{ height, width, position: 'absolute' }}></div>\n      <div style={{ position: 'absolute', left: width - LEGEND_WIDTH }}>\n        <MapLegend\n          colorDomain={cDomain}\n          title={`${MAP_TYPE_CONVERT[mapType]} (${UNITS[mapType]})`}\n          width={LEGEND_WIDTH}\n        ></MapLegend>\n      </div>\n      <Loading left={width / 2} top={height / 2} size={70} loading={loading} />\n    </div>\n  );\n};\n\nexport default MeasurementMap;\n","import React, { useEffect, useState } from 'react';\nimport * as d3 from 'd3';\n\nimport { MapType } from './MapSelectionRadio';\n\nimport sites from './sites.json';\nimport { API, MULTIPLIERS } from './MeasurementMap';\nimport fetchToJson from './utils/fetch-to-json';\nimport Loading from './Loading';\n\ninterface LineChartProps {\n  mapType: MapType;\n  offset: number;\n  width: number;\n  height: number;\n  selectedSites: SidebarOption[];\n  setLoading: React.Dispatch<React.SetStateAction<boolean>>;\n  loading: boolean;\n}\n\nconst colors = d3\n  .scaleOrdinal()\n  .domain(sites.map(s => s.name))\n  .range(d3.schemeTableau10);\n\nconst margin = {\n  left: 50,\n  bottom: 20,\n  right: 0,\n  top: 20,\n};\n\nconst mapTypeConvert = {\n  ping: 'Ping (ms)',\n  upload_speed: 'Upload Speed (Mbps)',\n  download_speed: 'Download Speed (Mbps)',\n};\n\nconst LineChart = ({\n  mapType,\n  offset,\n  width,\n  height,\n  selectedSites,\n  setLoading,\n  loading,\n}: LineChartProps) => {\n  const [xAxis, setXAxis] =\n    useState<d3.Selection<SVGGElement, unknown, HTMLElement, any>>();\n  const [yAxis, setYAxis] =\n    useState<d3.Selection<SVGGElement, unknown, HTMLElement, any>>();\n  const [lines, setLines] =\n    useState<d3.Selection<SVGGElement, unknown, HTMLElement, any>>();\n  const [yTitle, setYTitle] =\n    useState<d3.Selection<SVGTextElement, unknown, HTMLElement, any>>();\n\n  useEffect(() => {\n    const svg = d3.select('#line-chart');\n    const g = svg\n      .append('g')\n      .attr('transform', `translate(${margin.left}, ${margin.top})`);\n\n    setXAxis(g.append('g'));\n    setYAxis(g.append('g'));\n    setLines(g.append('g'));\n    setYTitle(\n      g.append('g').attr('transform', 'translate(0,10)').append('text'),\n    );\n    g.append('g').attr('transform', 'translate(0,0)').append('text');\n    setLoading(false);\n  }, [setXAxis, setYAxis, setLines, setYTitle, setLoading]);\n\n  useEffect(() => {\n    if (!xAxis || !yAxis || !lines || !yTitle) return;\n    (async function () {\n      setLoading(true);\n      const _selectedSites = selectedSites.map(ss => ss.label);\n\n      const data: {\n        site: string;\n        values: { date: Date; value: number }[];\n      }[] = (\n        await fetchToJson(\n          API +\n            'lineSummary?' +\n            new URLSearchParams([\n              ['mapType', mapType],\n              ['selectedSites', _selectedSites.join(',')],\n            ]),\n        )\n      ).map((d: any) => ({\n        site: d.site,\n        values: d.values.map((v: any) => ({\n          date: new Date(v.date),\n          value: v.value,\n        })),\n      }));\n\n      const chartWidth = width - margin.left - margin.right;\n      const chartHeight = height - margin.top - margin.bottom;\n\n      const flat = data.map(a => a.values).flat();\n      const xScale = d3\n        .scaleTime()\n        .domain(\n          d3\n            .extent(flat, d => new Date(d.date))\n            .map((d?: Date) => d ?? new Date(0)),\n        )\n        .range([0, chartWidth]);\n\n      const yScale = d3\n        .scaleLinear()\n        .domain([0, (d3.max(flat, d => d.value) ?? 1) * MULTIPLIERS[mapType]])\n        .range([chartHeight, 0]);\n\n      const xAxisGenerator = d3.axisBottom(xScale);\n\n      const yAxisGenerator = d3.axisLeft(yScale);\n\n      const lineGenerator = d3\n        .line<{ date: Date; value: number }>()\n        .x(d => xScale(d.date))\n        .y(d => yScale(d.value * MULTIPLIERS[mapType]));\n\n      // ----------------------------------------- CHART --------------------------------------------------\n\n      const svg = d3.select('#line-chart');\n      const tooltip = d3\n        .select('#line-tooltip')\n        .style('position', 'absolute')\n        .style('background-color', 'white')\n        .style('border', 'solid')\n        .style('border-width', '2px')\n        .style('border-radius', '3px')\n        .style('padding', '3px')\n        .style('font-size', 'small')\n        .style('opacity', 1)\n        .style('display', 'none');\n\n      svg.attr('width', width).attr('height', height);\n\n      xAxis\n        .attr('transform', `translate(0, ${chartHeight})`)\n        .style('user-select', 'none')\n        .transition()\n        .duration(1000)\n        .call(xAxisGenerator);\n\n      yAxis\n        .style('user-select', 'none')\n        .transition()\n        .duration(1000)\n        .call(yAxisGenerator);\n\n      yTitle\n        .attr('x', 3)\n        .style('user-select', 'none')\n        .attr('font-size', 12)\n        .attr('text-anchor', 'start')\n        .attr('font-weight', 'bold')\n        .text(mapTypeConvert[mapType]);\n\n      lines\n        .selectAll('.line')\n        .data(data, (d: any) => d.site)\n        .join(\n          enter =>\n            enter\n              .append('path')\n              .attr('d', d =>\n                lineGenerator(d.values.map(({ date }) => ({ date, value: 0 }))),\n              )\n              .attr('class', 'line')\n              .style('fill', 'none')\n              .style('stroke', d => colors(d.site) + '')\n              .style('stroke-width', 2)\n              .style('stroke-linejoin', 'round')\n              .style('opacity', 0)\n              .on('mouseover', (_, d) =>\n                tooltip.style('display', 'inline').html(d.site),\n              )\n              .on('mousemove', (event, d) =>\n                tooltip\n                  .html(d.site)\n                  .style('left', event.pageX + 10 + 'px')\n                  .style('top', event.pageY + 20 + 'px'),\n              )\n              .on('mouseout', () => tooltip.style('display', 'none')),\n          update => update,\n          exit => exit.remove(),\n        )\n        .transition()\n        .duration(1000)\n        .style('opacity', 1)\n        .attr('d', d => lineGenerator(d.values));\n      setLoading(false);\n    })();\n  }, [\n    mapType,\n    xAxis,\n    yAxis,\n    lines,\n    yTitle,\n    selectedSites,\n    height,\n    setLoading,\n    width,\n  ]);\n\n  return (\n    <>\n      <div style={{ height, width, position: 'relative', top: offset }}>\n        <svg id='line-chart'></svg>\n        <Loading\n          left={width / 2}\n          top={height / 2}\n          size={70}\n          loading={loading}\n        />\n      </div>\n      <div id='line-tooltip' style={{ position: 'absolute', opacity: 0 }}></div>\n    </>\n  );\n};\n\nexport default LineChart;\n","import React, { useState } from 'react';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport MapSelectionRadio, { MapType } from './MapSelectionRadio';\nimport Navbar from './Navbar';\nimport Sidebar from './Sidebar';\nimport MeasurementMap from './MeasurementMap';\nimport 'fontsource-roboto';\nimport './index.css';\nimport LineChart from './LineChart';\n\nfunction App() {\n  const [mapType, setMapType] = useState<MapType>('ping');\n  const [selectedSites, setSelectedSites] = useState<SidebarOption[]>([]);\n  const [loadingMap, setLoadingMap] = useState(true);\n  const [loadingLine, setLoadingLine] = useState(true);\n\n  document.title = 'Performance Evaluation';\n  return (\n    <div className='App'>\n      <Navbar />\n      <Container>\n        <Grid container spacing={3}>\n          <Grid item xs={3}>\n            <Sidebar\n              selectedSites={selectedSites}\n              setSelectedSites={setSelectedSites}\n              loading={loadingLine || loadingMap}\n            />\n          </Grid>\n          <Grid item xs={9}>\n            <MapSelectionRadio\n              mapType={mapType}\n              setMapType={setMapType}\n              loading={loadingLine || loadingMap}\n            />\n            <MeasurementMap\n              mapType={mapType}\n              selectedSites={selectedSites}\n              setLoading={setLoadingMap}\n              width={910}\n              height={500}\n              loading={loadingMap}\n            />\n            <LineChart\n              mapType={mapType}\n              offset={500}\n              width={910}\n              height={200}\n              selectedSites={selectedSites}\n              setLoading={setLoadingLine}\n              loading={loadingLine}\n            />\n          </Grid>\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}